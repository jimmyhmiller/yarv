#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "erb"
require "fileutils"
require "kramdown"
require "stringio"
require "syntax_tree"

filepaths = Dir[File.expand_path("../lib/yarv/insn/*.rb", __dir__)] \
  .reject { |filepath| filepath.end_with?("insn/insn.rb") } # Skip the abstract instruction.

markdown = StringIO.new

# For each YARV instruction file, we're going to yank out the comments.
filepaths.each do |filepath|
  # Parse the source using SyntaxTree and grab all of the comments.
  ast = SyntaxTree.parse(SyntaxTree.read(filepath))
  ast => { statements: { body: [*, SyntaxTree::ModuleDeclaration => mod] } }
  mod => { constant: { constant: { value: "YARV" } }, bodystmt: { statements: { body: [SyntaxTree::VoidStmt, *comments, SyntaxTree::ClassDeclaration] } } }

  formatted_comments = comments.map { |comment| comment.value[2..-1] }.join("\n")

  # Extract the ruby code block from the comments, generate the instruction
  # sequence for it, and then inject the commented sequence into the block
  ruby_code_match = formatted_comments.match(/~~~ruby\n([\S\s]*)~~~/)

  if ruby_code_match.nil?
    raise "Missing ruby example in #{filepath} doc comment"
  else
    ruby_code = ruby_code_match[1]
  end
  
  disasm = RubyVM::InstructionSequence.new(ruby_code).disasm
  disasm.gsub!(/^/, "# ")

  formatted_comments.gsub!(/^~~~\n$/, "\n" + disasm + "~~~\n")

  # Write the comments out in their own section.
  markdown.puts(<<~MARKDOWN)
    ## #{File.basename(filepath, ".rb")}

    #{formatted_comments}
  MARKDOWN
end

navigation = StringIO.new
filepaths.each do |filepath|
  basename = File.basename(filepath, ".rb")
  navigation.puts("<a href=\"##{basename.delete("_")}\">#{basename}</a>")
end
navigation.puts

template = ERB.new(DATA.read)
FileUtils.mkdir_p("doc")

body = Kramdown::Document.new(markdown.string, syntax_highlighter: :rouge).to_html
body = ERB.new(<<~HTML).result_with_hash(body: body, nav: navigation.string)
<aside>
  <header>
    <h1>YARV Instructions</h1>
  </header>
  <nav>
    <%= nav %>
  </nav>
</aside>
<article>
  <%= body %>
</article>
HTML

File.write("doc/index.html", template.result_with_hash(body: body))

glossary = File.read(File.expand_path("../GLOSSARY.md", __dir__))
navigation = StringIO.new

glossary.each_line(chomp: true) do |line|
  if line =~ /^## (.+)$/
    heading = $1
    navigation.puts("<a href=\"##{heading.downcase.gsub(" ", "-")}\">#{heading}</a>")
  end
end

body = Kramdown::Document.new(glossary, syntax_highlighter: :rouge).to_html
body = ERB.new(<<~HTML).result_with_hash(body: body, nav: navigation.string)
<aside>
  <header>
    <h1>Glossary of Terms</h1>
  </header>
  <nav>
    <%= nav %>
  </nav>
</aside>
<article>
  <%= body %>
</article>
HTML

File.write("doc/glossary.html", template.result_with_hash(body: body))

__END__
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1, maximum-scale=5">
    <title>YARV</title>
    <link rel="icon" href="favicon.svg">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Code+Pro|Source+Serif+Pro&amp;display=swap">
    <link rel="stylesheet" type="text/css" href="style.css">
    <link rel="stylesheet" type="text/css" href="highlight.css">
  </head>
  <body>
    <a href="https://github.com/kddnewton/yarv" style="position: absolute; right: 0; top: 0" aria-label="View source on GitHub">
      <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 250 250" fill="white">
        <path d="M0 0l115 115h15l12 27 108 108V0z" fill="var(--primary-color)" />
        <path d="M128 109c-15-9-9-19-9-19 3-7 2-11 2-11-1-7 3-2 3-2 4 5 2 11 2 11-3 10 5 15 9 16" style="transform-origin: 130px 106px" />
        <path d="M115 115s4 2 5 0l14-14c3-2 6-3 8-3-8-11-15-24 2-41 5-5 10-7 16-7 1-2 3-7 12-11 0 0 5 3 7 16 4 2 8 5 12 9s7 8 9 12c14 3 17 7 17 7-4 8-9 11-11 11 0 6-2 11-7 16-16 16-30 10-41 2 0 3-1 7-5 11l-12 11c-1 1 1 5 1 5z" />
      </svg>
    </a>
    <main>
      <%= body %>
    </main>
  </body>
</html>
